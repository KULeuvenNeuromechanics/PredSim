This is Ipopt version 3.12.3, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).

Number of nonzeros in equality constraint Jacobian...:   674354
Number of nonzeros in inequality constraint Jacobian.:    65550
Number of nonzeros in Lagrangian Hessian.............:        0

CasADi -  WARNING("solver:nlp_grad_f failed: NaN detected for output grad_f_x, at (row 1, col 1).") [.../casadi/core/oracle_function.cpp:265]
Error evaluating objective gradient at user provided starting point.
  No scaling factor for objective function computed!
CasADi -  WARNING("solver:nlp_jac_g failed: NaN detected for output jac_g_x, at nonzero index 247 (row 247, col 1).") [.../casadi/core/oracle_function.cpp:265]
Error evaluating Jacobian of equality constraints at user provided starting point.
  No scaling factors for equality constraints computed!
CasADi -  WARNING("solver:nlp_jac_g failed: NaN detected for output jac_g_x, at nonzero index 247 (row 247, col 1).") [.../casadi/core/oracle_function.cpp:265]
Error evaluating Jacobian of inequality constraints at user provided starting point.
  No scaling factors for inequality constraints computed!
CasADi -  WARNING("solver:nlp_g failed: NaN detected for output g, at (row 247, col 1).") [.../casadi/core/oracle_function.cpp:265]

Number of Iterations....: 0

Number of objective function evaluations             = 0
Number of objective gradient evaluations             = 0
Number of equality constraint evaluations            = 0
Number of inequality constraint evaluations          = 1
Number of equality constraint Jacobian evaluations   = 0
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =      1.742
Total CPU secs in NLP function evaluations           =      0.013

EXIT: Invalid number in NLP function or derivative detected.
      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval
       nlp_g  |  13.00ms ( 13.00ms)  12.96ms ( 12.96ms)         1
  nlp_grad_f  |  36.00ms ( 36.00ms)  36.68ms ( 36.68ms)         1
   nlp_jac_g  |   1.69 s (847.00ms)   1.69 s (846.72ms)         2
       total  |   1.76 s (  1.76 s)   1.76 s (  1.76 s)         1
This is Ipopt version 3.12.3, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).

Number of nonzeros in equality constraint Jacobian...:   674354
Number of nonzeros in inequality constraint Jacobian.:    65550
Number of nonzeros in Lagrangian Hessian.............:        0

CasADi -  WARNING("solver:nlp_grad_f failed: NaN detected for output grad_f_x, at (row 1, col 1).") [.../casadi/core/oracle_function.cpp:265]
Error evaluating objective gradient at user provided starting point.
  No scaling factor for objective function computed!
CasADi -  WARNING("solver:nlp_jac_g failed: NaN detected for output jac_g_x, at nonzero index 247 (row 247, col 1).") [.../casadi/core/oracle_function.cpp:265]
Error evaluating Jacobian of equality constraints at user provided starting point.
  No scaling factors for equality constraints computed!
CasADi -  WARNING("solver:nlp_jac_g failed: NaN detected for output jac_g_x, at nonzero index 247 (row 247, col 1).") [.../casadi/core/oracle_function.cpp:265]
Error evaluating Jacobian of inequality constraints at user provided starting point.
  No scaling factors for inequality constraints computed!
CasADi -  WARNING("solver:nlp_g failed: NaN detected for output g, at (row 247, col 1).") [.../casadi/core/oracle_function.cpp:265]

Number of Iterations....: 0

Number of objective function evaluations             = 0
Number of objective gradient evaluations             = 0
Number of equality constraint evaluations            = 0
Number of inequality constraint evaluations          = 1
Number of equality constraint Jacobian evaluations   = 0
Number of inequality constraint Jacobian evaluations = 0
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =      1.743
Total CPU secs in NLP function evaluations           =      0.013

EXIT: Invalid number in NLP function or derivative detected.
      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval
       nlp_g  |  13.00ms ( 13.00ms)  12.95ms ( 12.95ms)         1
  nlp_grad_f  |  37.00ms ( 37.00ms)  37.19ms ( 37.19ms)         1
   nlp_jac_g  |   1.69 s (847.00ms)   1.69 s (846.86ms)         2
       total  |   1.76 s (  1.76 s)   1.76 s (  1.76 s)         1
<a href="matlab: opentoline('C:\Users\u0150099\Documents\PredSim_dev\OCP\solve_NLPSOL.m',76,1)">76  </a>prob = struct('f', opti.f, 'x', opti.x, 'g',new_g );
new_g(247)

ans = 

vec(helper(opti7_x_1[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], opti7_x_2[:4600], opti7_x_3, opti7_x_4[:4600], opti7_x_5, opti7_x_6[:1550], opti7_x_7, opti7_x_8[:1550], opti7_x_9, opti7_x_10[:400], opti7_x_11, opti7_x_12, opti7_x_13, opti7_x_14, opti7_x_15){0})[246]
new_g(246)

ans = 

vec(helper(opti7_x_1[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], opti7_x_2[:4600], opti7_x_3, opti7_x_4[:4600], opti7_x_5, opti7_x_6[:1550], opti7_x_7, opti7_x_8[:1550], opti7_x_9, opti7_x_10[:400], opti7_x_11, opti7_x_12, opti7_x_13, opti7_x_14, opti7_x_15){0})[245]
new_g(240)

ans = 

vec(helper(opti7_x_1[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], opti7_x_2[:4600], opti7_x_3, opti7_x_4[:4600], opti7_x_5, opti7_x_6[:1550], opti7_x_7, opti7_x_8[:1550], opti7_x_9, opti7_x_10[:400], opti7_x_11, opti7_x_12, opti7_x_13, opti7_x_14, opti7_x_15){0})[239]
new_g(40)

ans = 

vec(helper(opti7_x_1[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], opti7_x_2[:4600], opti7_x_3, opti7_x_4[:4600], opti7_x_5, opti7_x_6[:1550], opti7_x_7, opti7_x_8[:1550], opti7_x_9, opti7_x_10[:400], opti7_x_11, opti7_x_12, opti7_x_13, opti7_x_14, opti7_x_15){0})[39]
find(isnan(Gguess(:))
 find(isnan(Gguess(:))
                      â†‘
{Invalid expression. When calling a function or indexing a variable, use parentheses. Otherwise, check for mismatched delimiters.
} 
find(isnan(Gguess(:)))

ans =

       74752
       74753
       74754
       74755
       74756
       74757
       74758
       74759
       75129
       75130
       75131
       75132
       75133
       75134
       75135
       75136
       75506
       75507
       75508
       75509
       75510
       75511
       75512
       75513
       75883
       75884
       75885
       75886
       75887
       75888
       75889
       75890
       76260
       76261
       76262
       76263
       76264
       76265
       76266
       76267
       76637
       76638
       76639
       76640
       76641
       76642
       76643
       76644
       77014
       77015
       77016
       77017
       77018
       77019
       77020
       77021
       77391
       77392
       77393
       77394
       77395
       77396
       77397
       77398
       77768
       77769
       77770
       77771
       77772
       77773
       77774
       77775
       78145
       78146
       78147
       78148
       78149
       78150
       78151
       78152
       78522
       78523
       78524
       78525
       78526
       78527
       78528
       78529
       78899
       78900
       78901
       78902
       78903
       78904
       78905
       78906
       79276
       79277
       79278
       79279
       79280
       79281
       79282
       79283
       79653
       79654
       79655
       79656
       79657
       79658
       79659
       79660
       80030
       80031
       80032
       80033
       80034
       80035
       80036
       80037
       80407
       80408
       80409
       80410
       80411
       80412
       80413
       80414
       80784
       80785
       80786
       80787
       80788
       80789
       80790
       80791
       81161
       81162
       81163
       81164
       81165
       81166
       81167
       81168
       81538
       81539
       81540
       81541
       81542
       81543
       81544
       81545
       81915
       81916
       81917
       81918
       81919
       81920
       81921
       81922
       82292
       82293
       82294
       82295
       82296
       82297
       82298
       82299
       82669
       82670
       82671
       82672
       82673
       82674
       82675
       82676
       83046
       83047
       83048
       83049
       83050
       83051
       83052
       83053
       83423
       83424
       83425
       83426
       83427
       83428
       83429
       83430
       83800
       83801
       83802
       83803
       83804
       83805
       83806
       83807
       84177
       84178
       84179
       84180
       84181
       84182
       84183
       84184
       84554
       84555
       84556
       84557
       84558
       84559
       84560
       84561
       84931
       84932
       84933
       84934
       84935
       84936
       84937
       84938
       85308
       85309
       85310
       85311
       85312
       85313
       85314
       85315
       85685
       85686
       85687
       85688
       85689
       85690
       85691
       85692
       86062
       86063
       86064
       86065
       86066
       86067
       86068
       86069
       86439
       86440
       86441
       86442
       86443
       86444
       86445
       86446
       86816
       86817
       86818
       86819
       86820
       86821
       86822
       86823
       87193
       87194
       87195
       87196
       87197
       87198
       87199
       87200
       87570
       87571
       87572
       87573
       87574
       87575
       87576
       87577
       87947
       87948
       87949
       87950
       87951
       87952
       87953
       87954
       88324
       88325
       88326
       88327
       88328
       88329
       88330
       88331
       88701
       88702
       88703
       88704
       88705
       88706
       88707
       88708
       89078
       89079
       89080
       89081
       89082
       89083
       89084
       89085
       89455
       89456
       89457
       89458
       89459
       89460
       89461
       89462
       89832
       89833
       89834
       89835
       89836
       89837
       89838
       89839
       90209
       90210
       90211
       90212
       90213
       90214
       90215
       90216
       90586
       90587
       90588
       90589
       90590
       90591
       90592
       90593
       90963
       90964
       90965
       90966
       90967
       90968
       90969
       90970
       91340
       91341
       91342
       91343
       91344
       91345
       91346
       91347
       91717
       91718
       91719
       91720
       91721
       91722
       91723
       91724
       92094
       92095
       92096
       92097
       92098
       92099
       92100
       92101
       92471
       92472
       92473
       92474
       92475
       92476
       92477
       92478
       92848
       92849
       92850
       92851
       92852
       92853
       92854
       92855
       93225
       93226
       93227
       93228
       93229
       93230
       93231
       93232
       93602
       93603
       93604
       93605
       93606
       93607
       93608
       93609
       93979
       93980
       93981
       93982
       93983
       93984
       93985
       93986
       94356
       94357
       94358
       94359
       94360
       94361
       94362
       94363
       94733
       94734
       94735
       94736
       94737
       94738
       94739
       94740
       95110
       95111
       95112
       95113
       95114
       95115
       95116
       95117
       95487
       95488
       95489
       95490
       95491
       95492
       95493
       95494
       95864
       95865
       95866
       95867
       95868
       95869
       95870
       95871
       96241
       96242
       96243
       96244
       96245
       96246
       96247
       96248
       96618
       96619
       96620
       96621
       96622
       96623
       96624
       96625
       96995
       96996
       96997
       96998
       96999
       97000
       97001
       97002
       97372
       97373
       97374
       97375
       97376
       97377
       97378
       97379
       97749
       97750
       97751
       97752
       97753
       97754
       97755
       97756
       98126
       98127
       98128
       98129
       98130
       98131
       98132
       98133
       98503
       98504
       98505
       98506
       98507
       98508
       98509
       98510
       98880
       98881
       98882
       98883
       98884
       98885
       98886
       98887
       99257
       99258
       99259
       99260
       99261
       99262
       99263
       99264
       99634
       99635
       99636
       99637
       99638
       99639
       99640
       99641
      100011
      100012
      100013
      100014
      100015
      100016
      100017
      100018
      100388
      100389
      100390
      100391
      100392
      100393
      100394
      100395
      100765
      100766
      100767
      100768
      100769
      100770
      100771
      100772
      101142
      101143
      101144
      101145
      101146
      101147
      101148
      101149
      101519
      101520
      101521
      101522
      101523
      101524
      101525
      101526
      101896
      101897
      101898
      101899
      101900
      101901
      101902
      101903
      102273
      102274
      102275
      102276
      102277
      102278
      102279
      102280
      102650
      102651
      102652
      102653
      102654
      102655
      102656
      102657
      103027
      103028
      103029
      103030
      103031
      103032
      103033
      103034
      103404
      103405
      103406
      103407
      103408
      103409
      103410
      103411
      103781
      103782
      103783
      103784
      103785
      103786
      103787
      103788
      104158
      104159
      104160
      104161
      104162
      104163
      104164
      104165
      104535
      104536
      104537
      104538
      104539
      104540
      104541
      104542
      104912
      104913
      104914
      104915
      104916
      104917
      104918
      104919
      105289
      105290
      105291
      105292
      105293
      105294
      105295
      105296
      105666
      105667
      105668
      105669
      105670
      105671
      105672
      105673
      106043
      106044
      106045
      106046
      106047
      106048
      106049
      106050
      106420
      106421
      106422
      106423
      106424
      106425
      106426
      106427
      106797
      106798
      106799
      106800
      106801
      106802
      106803
      106804
      107174
      107175
      107176
      107177
      107178
      107179
      107180
      107181
      107551
      107552
      107553
      107554
      107555
      107556
      107557
      107558
      107928
      107929
      107930
      107931
      107932
      107933
      107934
      107935
      108305
      108306
      108307
      108308
      108309
      108310
      108311
      108312
      108682
      108683
      108684
      108685
      108686
      108687
      108688
      108689
      109059
      109060
      109061
      109062
      109063
      109064
      109065
      109066
      109436
      109437
      109438
      109439
      109440
      109441
      109442
      109443
      109813
      109814
      109815
      109816
      109817
      109818
      109819
      109820
      110190
      110191
      110192
      110193
      110194
      110195
      110196
      110197
      110567
      110568
      110569
      110570
      110571
      110572
      110573
      110574
      110944
      110945
      110946
      110947
      110948
      110949
      110950
      110951
      111321
      111322
      111323
      111324
      111325
      111326
      111327
      111328
      111698
      111699
      111700
      111701
      111702
      111703
      111704
      111705
      112075
      112076
      112077
      112078
      112079
      112080
      112081
      112082
      112452
      112453
      112454
      112455
      112456
      112457
      112458
      112459
      112829
      112830
      112831
      112832
      112833
      112834
      112835
      112836
      113206
      113207
      113208
      113209
      113210
      113211
      113212
      113213
      113583
      113584
      113585
      113586
      113587
      113588
      113589
      113590
      113960
      113961
      113962
      113963
      113964
      113965
      113966
      113967
      114337
      114338
      114339
      114340
      114341
      114342
      114343
      114344
      114714
      114715
      114716
      114717
      114718
      114719
      114720
      114721
      115091
      115092
      115093
      115094
      115095
      115096
      115097
      115098
      115468
      115469
      115470
      115471
      115472
      115473
      115474
      115475
      115845
      115846
      115847
      115848
      115849
      115850
      115851
      115852
      116222
      116223
      116224
      116225
      116226
      116227
      116228
      116229
      116599
      116600
      116601
      116602
      116603
      116604
      116605
      116606
      116976
      116977
      116978
      116979
      116980
      116981
      116982
      116983
      117353
      117354
      117355
      117356
      117357
      117358
      117359
      117360
      117730
      117731
      117732
      117733
      117734
      117735
      117736
      117737
      118107
      118108
      118109
      118110
      118111
      118112
      118113
      118114
      118484
      118485
      118486
      118487
      118488
      118489
      118490
      118491
      118861
      118862
      118863
      118864
      118865
      118866
      118867
      118868
      119238
      119239
      119240
      119241
      119242
      119243
      119244
      119245
      119615
      119616
      119617
      119618
      119619
      119620
      119621
      119622
      119992
      119993
      119994
      119995
      119996
      119997
      119998
      119999
      120369
      120370
      120371
      120372
      120373
      120374
      120375
      120376
      120746
      120747
      120748
      120749
      120750
      120751
      120752
      120753
      121123
      121124
      121125
      121126
      121127
      121128
      121129
      121130
      121500
      121501
      121502
      121503
      121504
      121505
      121506
      121507
      121877
      121878
      121879
      121880
      121881
      121882
      121883
      121884
      122254
      122255
      122256
      122257
      122258
      122259
      122260
      122261
      122631
      122632
      122633
      122634
      122635
      122636
      122637
      122638
      123008
      123009
      123010
      123011
      123012
      123013
      123014
      123015
      123385
      123386
      123387
      123388
      123389
      123390
      123391
      123392
      123762
      123763
      123764
      123765
      123766
      123767
      123768
      123769
      124139
      124140
      124141
      124142
      124143
      124144
      124145
      124146
      124516
      124517
      124518
      124519
      124520
      124521
      124522
      124523
      124893
      124894
      124895
      124896
      124897
      124898
      124899
      124900
      125270
      125271
      125272
      125273
      125274
      125275
      125276
      125277
      125647
      125648
      125649
      125650
      125651
      125652
      125653
      125654
      126024
      126025
      126026
      126027
      126028
      126029
      126030
      126031
      126401
      126402
      126403
      126404
      126405
      126406
      126407
      126408
      126778
      126779
      126780
      126781
      126782
      126783
      126784
      126785
      127155
      127156
      127157
      127158
      127159
      127160
      127161
      127162
      127532
      127533
      127534
      127535
      127536
      127537
      127538
      127539
      127909
      127910
      127911
      127912
      127913
      127914
      127915
      127916
      128286
      128287
      128288
      128289
      128290
      128291
      128292
      128293
      128663
      128664
      128665
      128666
      128667
      128668
      128669
      128670
      129040
      129041
      129042
      129043
      129044
      129045
      129046
      129047
      129417
      129418
      129419
      129420
      129421
      129422
      129423
      129424
      129794
      129795
      129796
      129797
      129798
      129799
      129800
      129801
      130171
      130172
      130173
      130174
      130175
      130176
      130177
      130178
      130548
      130549
      130550
      130551
      130552
      130553
      130554
      130555
      130925
      130926
      130927
      130928
      130929
      130930
      130931
      130932

74752-i

ans =

   247

g(74752)

ans = 

vec(helper(opti7_x_1[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], opti7_x_2[:4600], opti7_x_3, opti7_x_4[:4600], opti7_x_5, opti7_x_6[:1550], opti7_x_7, opti7_x_8[:1550], opti7_x_9, opti7_x_10[:400], opti7_x_11, opti7_x_12, opti7_x_13, opti7_x_14, opti7_x_15){0})[246]
dbquit
main
Using a quasi-random guess as initial guess.
C:\Users\u0150099\Documents\PredSim_dev\PreProcessing\IK_Bounds_Default.osim will be used to determine IG bounds.
Start PreProcessing...
... PreProcessing done. Time elapsed 2.7348 s
Start creating CasADi functions...
... CasADi functions created. Time elapsed 1.6541 s
Start formulating OCP...
<a href="matlab: opentoline('C:\Users\u0150099\Documents\PredSim_dev\OCP\OCP_formulation.m',502,1)">502 </a>opti.minimize(Jall_sc);
find(isnan(coll_eq_constr(:)))
{Check for incorrect argument data type or missing argument in call to function 'isnan'.
} 
coll_eq_constr(247)

ans = 

helper(opti8_x_1[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], opti8_x_2[:4600], opti8_x_3, opti8_x_4[:4600], opti8_x_5, opti8_x_6[:1550], opti8_x_7, opti8_x_8[:1550], opti8_x_9, opti8_x_10[:400], opti8_x_11, opti8_x_12, opti8_x_13, opti8_x_14, opti8_x_15){0}[246]
eq_constr(247)

ans = 

(((tfk/50)*f_ACtuatorActivationDynamics(e_ak, a_akmesh[:8]){0})-mac(horzcat(a_ak, a_akmesh),[-4.13939, 3.22474, 1.16784, -0.253197],zeros(8x1)))[0]
dbquit
main
Using a quasi-random guess as initial guess.
C:\Users\u0150099\Documents\PredSim_dev\PreProcessing\IK_Bounds_Default.osim will be used to determine IG bounds.
Start PreProcessing...
... PreProcessing done. Time elapsed 2.9258 s
Start creating CasADi functions...
... CasADi functions created. Time elapsed 1.6857 s
Start formulating OCP...
<a href="matlab: opentoline('C:\Users\u0150099\Documents\PredSim_dev\OCP\OCP_formulation.m',502,1)">502 </a>opti.minimize(Jall_sc);
dbquit
main
Using a quasi-random guess as initial guess.
C:\Users\u0150099\Documents\PredSim_dev\PreProcessing\IK_Bounds_Default.osim will be used to determine IG bounds.
Start PreProcessing...
... PreProcessing done. Time elapsed 2.7576 s
Start creating CasADi functions...
... CasADi functions created. Time elapsed 1.6424 s
Start formulating OCP...
<a href="matlab: opentoline('C:\Users\u0150099\Documents\PredSim_dev\OCP\OCP_formulation.m',502,1)">502 </a>opti.minimize(Jall_sc);
f_casadi.ActuatorActivationDynamics

ans = 

f_ActuatorActivationDynamics:(e[8],a[8])->(dadt[8]) SXFunction
tmp = zeros(8,1)

tmp =

     0
     0
     0
     0
     0
     0
     0
     0

f_casadi.ActuatorActivationDynamics(tmp,tmp)

ans = 

[nan, nan, nan, nan, nan, nan, nan, nan]
dbquit
main
Using a quasi-random guess as initial guess.
C:\Users\u0150099\Documents\PredSim_dev\PreProcessing\IK_Bounds_Default.osim will be used to determine IG bounds.
Start PreProcessing...
... PreProcessing done. Time elapsed 2.727 s
Start creating CasADi functions...
... CasADi functions created. Time elapsed 1.6414 s
Start formulating OCP...
<a href="matlab: opentoline('C:\Users\u0150099\Documents\PredSim_dev\OCP\OCP_formulation.m',502,1)">502 </a>opti.minimize(Jall_sc);
tmp = zeros(8,1)

tmp =

     0
     0
     0
     0
     0
     0
     0
     0

f_casadi.ActuatorActivationDynamics(tmp,tmp)

ans = 

[0, 0, 0, 0, 0, 0, 0, 0]
dbcont
dbcont
This is Ipopt version 3.12.3, running with linear solver mumps.
NOTE: Other linear solvers might be more efficient (see Ipopt documentation).

Number of nonzeros in equality constraint Jacobian...:   674354
Number of nonzeros in inequality constraint Jacobian.:    65550
Number of nonzeros in Lagrangian Hessian.............:        0

Total number of variables............................:    74504
                     variables with only lower bounds:        0
                variables with lower and upper bounds:    74504
                     variables with only upper bounds:        0
Total number of equality constraints.................:    69504
Total number of inequality constraints...............:    28350
        inequality constraints with only lower bounds:    13800
   inequality constraints with lower and upper bounds:      750
        inequality constraints with only upper bounds:    13800

iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
   0 7.4227129e+003 3.77e+004 1.00e+002   0.0 0.00e+000    -  0.00e+000 0.00e+000   0
   1 6.6003140e+003 3.51e+004 1.93e+003   0.4 3.42e+001    -  9.25e-002 7.69e-002f  1
   2 6.4569956e+003 3.45e+004 2.77e+003   0.5 4.59e+001    -  1.82e-001 1.70e-002f  1
   3 6.4286830e+003 3.43e+004 2.74e+003   0.0 8.92e+001    -  8.70e-002 4.25e-003f  1
   4 6.5458607e+003 3.37e+004 3.17e+003   1.0 3.75e+002    -  3.99e-002 1.94e-002f  1
   5 6.8026594e+003 3.30e+004 8.20e+003  -0.5 3.10e+002    -  3.25e-002 2.14e-002f  1

Number of Iterations....: 5

                                   (scaled)                 (unscaled)
Objective...............:  4.0422669395524977e+001   6.8026593790659881e+003
Dual infeasibility......:  8.1998957871069360e+003   1.3799459268195182e+006
Constraint violation....:  5.1548566310545256e+000   3.2961861723964765e+004
Complementarity.........:  5.9645325804284667e+001   1.0037606151880762e+004
Overall NLP error.......:  3.9800226871282989e+003   1.3799459268195182e+006


Number of objective function evaluations             = 6
Number of objective gradient evaluations             = 6
Number of equality constraint evaluations            = 6
Number of inequality constraint evaluations          = 6
Number of equality constraint Jacobian evaluations   = 6
Number of inequality constraint Jacobian evaluations = 6
Number of Lagrangian Hessian evaluations             = 0
Total CPU secs in IPOPT (w/o function evaluations)   =     13.279
Total CPU secs in NLP function evaluations           =      5.347

EXIT: Maximum Number of Iterations Exceeded.
      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval
       nlp_f  |  65.00ms ( 10.83ms)  64.25ms ( 10.71ms)         6
       nlp_g  |  71.00ms ( 11.83ms)  72.22ms ( 12.04ms)         6
  nlp_grad_f  | 245.00ms ( 35.00ms) 245.66ms ( 35.09ms)         7
   nlp_jac_g  |   5.84 s (834.86ms)   5.84 s (834.88ms)         7
       total  |  18.63 s ( 18.63 s)  18.63 s ( 18.63 s)         1
